;Author: Aliaa Gheis
;DATE:
;This Progam
;======================
;======================

                ;       0    1    2    3    4    5    6    7        rows
                ;  0    0    1    2    3    4    5    6    7
                ;  1    8    ............................ 15
                ;  2    16   ...............................
                ;  3    24 ..................................
                ;  4    32 ..................................   
                ;  5    40 ..................................
                ;  6    48 ..................................
                ;  7    56..............................  63

        PUBLIC StartGame
        PUBLIC boardWidth, imageWidth, color, board, Bpawn, validateMoves, highlightPeiceMvs
        PUBLIC playerCells, playerCols, playerRows, PlayerPos, highlightColor, PlayerSelectedCell,PlayerSelectedRow, PlayerSelectedPos
        EXTRN DrawGrid:FAR
        EXTRN DrawBoard:FAR
        EXTRN DrawSquareBord:FAR
        EXTRN MvePlayerFromGraphics:FAR
        EXTRN MvePlayerToGraphics:FAR
        EXTRN DrawHighlightedMvs:FAR
        EXTRN ClrHighlightedMvs:FAR
        EXTRN MvePieceToGraphics:FAR
        EXTRN MvePieceFromGraphics:FAR
        
        .286
        .MODEL HUGE
        .STACK 256
.DATA
        color          db  31, 9
        highlightColor equ 72
        highlightPeiceMvs db ?, 64, 80
        boardWidth     equ 23
        imageWidth     equ 23
        ; ____ game time _____ ;
        GameMin        equ 5
        GameSec        equ 0

        StartMin        db ?
        StartSec        db ?
        ; ____ game peice ____ ;
        emptyCell      equ 0
        pawn           equ 1
        rook           equ 2
        knight         equ 3
        bishop         equ 4
        queen          equ 5
        king           equ 6
        ; ____ peice color ____ ;
        black          equ 8
        white          equ 0
        ; ____ peice mask ____ ;
        peice          equ 7
        ;______pawn directions_____;
        pawnDir         db ?, +8, -8
        ;____ players _____;
        player1         equ 1
        player2         equ 2
        playerMoveToChoosePeice equ 0
        playerMoveToChooseAction equ 1
        PlayerLose equ 2
        PlayerWin equ 3
        PlayerEndedGame equ 4

        playersState db ?, playerMoveToChoosePeice, playerMoveToChoosePeice

        playerCells db ?, 0, 56
        playerRows  db ?, 0, 7
        playerCols  db ?, 0, 0
        PlayerPos   dw ?, 0, 51520
        PlayerSelectedCell  db ?, ?, ?
        PlayerSelectedRow  db ?, ?, ?
        PlayerSelectedPos  dw ?, ?, ?

        validateMoves db 64 dup(0)
        ; ____ board ____ ;
        board          db  rook+black, knight+black, bishop+black, queen+black, king+black, bishop+black, knight+black, rook+black
                       db  8 dup(pawn+black)
                       db  4 dup(8 dup(emptyCell))
                       db  8 dup(pawn)
                       db  rook, knight, bishop, queen, king, bishop, knight, rook
        peiceTimer     dw  64 dup(0)

Bpawn DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wpawn DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Brook DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wrook DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 15, 15, 16, 16, 15, 15, 15, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bknight DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 4, 4, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wknight DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 4, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 15, 15, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4
 DB 4, 16, 16, 16, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bbishop DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wbishop DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 16, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 16, 16, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bqueen DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wqueen DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 4, 4
 DB 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 15, 16, 16, 15, 16, 16, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 16, 16, 15, 16, 16, 15, 15, 16, 15, 15, 16, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 16, 16, 15, 16, 16, 16, 16, 16, 15, 16, 16, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bking DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 16, 4, 4, 4, 4
 DB 4, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 16, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 16, 15, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 4, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 15, 15, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 15, 15, 15, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wking DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 15, 15, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 15, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4        

.code



RowColToCell    PROC FAR ;al = row  cl = col  =>> si = CellNumber
                push ax
                push bx
                mov bl,8
                mul bl  ; al = al*8
                add al, cl ; al = al*8 + col

                sub ah, ah
                mov si, ax

                pop bx
                pop ax
                RET
RowColToCell ENDP 


;________ __________ ___________;
;________ __________ ___________;
;________ validators ___________;
;________ __________ ___________;
;________ __________ ___________;
GetPlayerColorV2 Proc   FAR; si = player   ; cl=piece    ;ch =output 
                push si
                ;for empty cell
                cmp cl,emptyCell
                je result
                ; if si =1 => 8  || si = 2 =>0
                and si ,1
                shl si, 3
                and cl ,black
                mov ch,0
                ;compare if the color is the same
                cmp cx,si 
                jne result

                mov cx, 0
                pop si
                RET
                


        result: pop si
                mov cx,si
                
ret
GetPlayerColorV2 Endp

;** si = peice
GetPlayerColor Proc far  ; si = player   ; cl =color
                push si
                shr si,3;si = color            
                and si,1;si = color => make sure   
                mov ch,0
                mov cx,si;cx => 0 => white || 1 =>
                pop si
    ret
GetPlayerColor Endp

ispeice Proc  FAR; si = palyer ; dl = 1 if piece and 0 if not piece
                push si
                and si ,peice
                shl si,5
                jnz PeiceExist
                mov dl,0 
                jmp Ex
                PeiceExist:
                mov dl,1
                Ex:
                pop si
    ret
ispeice Endp
; === helpers
ValidatePawn    PROC FAR  ;al = row cl = col si = player di = cell
                pusha
                mov bh, 0
                mov dx, si 
                mov ah, 0
                mov al, playerCells[si]
                mov di, ax
                ;===== for valid players ====;
                cmp si, 1 ;chk if player black
                jne PaP2

        PaP1:   
                PwnMv1: cmp playerRows[si], 1           ;down twice in first move
                        jne PwnMv2
                        mov al, board[di+16]
                        cmp al, emptyCell
                        jne PwnMv2
                        mov validateMoves[di+16], dl
                PwnMv2: ;down one if
                        mov al, board[di+8]
                        cmp al, emptyCell
                        jne PwnMv3
                        mov validateMoves[di+8], dl

                PwnMv3: ;right down
                        cmp PlayerCols[si], 7
                        je PwnMv4
                        mov al, board[di+9]
                        cmp al, emptyCell
                        je PwnMv4
                        shr al, 3               ;get color bit
                        cmp al, 0               ;check if white
                        jne PwnMv4
                        mov validateMoves[di+9], dl
                PwnMv4: ;right down
                        cmp PlayerCols[si], 0
                        mov al, board[di+7]
                        cmp al, emptyCell
                        je EXITPP1
                        shr al, 3               ;get color bit
                        cmp al, 0               ;check if white
                        jne EXITPP1
                        mov validateMoves[di+7], dl
                EXITPP1:
                POPA
                RET
        PaP2:
                PwnMv12: cmp playerRows[si], 6           ;up twice in first move
                        jne PwnMv22
                        mov al, board[di-16]
                        cmp al, emptyCell
                        jne PwnMv22
                        mov validateMoves[di-16], dl
                PwnMv22: ;up one if
                        mov al, board[di-8]
                        cmp al, emptyCell
                        jne PwnMv32
                        mov validateMoves[di-8], dl

                PwnMv32: ;left down
                        cmp PlayerCols[si], 7
                        je PwnMv42
                        mov al, board[di-9]
                        cmp al, emptyCell
                        je PwnMv42
                        shr al, 3               ;get color bit
                        cmp al, 1               ;check if white
                        jne PwnMv42
                        mov validateMoves[di-9], dl
                PwnMv42: ;right down
                        cmp PlayerCols[si], 0
                        mov al, board[di-7]
                        cmp al, emptyCell
                        je EXITPP2
                        shr al, 3               ;get color bit
                        cmp al, 1               ;check if white
                        jne EXITPP2
                        mov validateMoves[di-7], dl
                EXITPP2:
                popa
                RET     
ValidatePawn    ENDP

ValidateRook    Proc ;al = row cl = col si = player di = cell
                pusha

                
                mov ax, 0
                mov al, playerCells[si]
                mov di, ax 

                mov al, playerRows[si] 
                mov cl, playerCols[si]
                
                push cx
                push si
                mov cl,board[di]
                mov ch,0
                mov si,cx
                Call GetPlayerColor  ; bx=color of the player to get its validation pos
                mov bx,cx  
                pop si
                pop cx
                push ax
                mov ax,si 
                mov ch,al
                pop ax
                pusha             
        verticalDown:
                cmp al,7
                jz VP
                inc al
                add di,8
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH
                pop cx
                jmp Helight
                NH:
                pop cx
                jmp NotHelight
                Helight:
                mov validateMoves[di],ch
                NotHelight:
                cmp dl,1
        jnz verticalDown
                VP:
                popa
                pusha
                
        verticalUP: 
                cmp al,0
                jz  HR
                dec al
                sub di,8 
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight1
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH1
                pop cx
                jmp Helight1
                NH1:
                pop cx
                jmp NotHelight1
                Helight1:
                mov validateMoves[di],ch
                NotHelight1:
                cmp dl,1
        jnz verticalUP

                HR:
                popa
                pusha

        HorizontalRight:  
                cmp cl,7
                jz HL
                inc cl
                add di,1 
                mov dl,board[di]
                mov dh,0
                mov si,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight2
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH2
                pop cx
                jmp Helight2
                NH2:
                pop cx
                jmp NotHelight2
                Helight2:
                mov validateMoves[di],ch
                NotHelight2:
                cmp dl,1
        jnz HorizontalRight

                HL:
                popa
                
                pusha
                
        HorizontalLeft:  
                cmp cl,0
                jz  EndValidate
                dec cl
                sub di,1
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight3
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH3
                pop cx
                jmp Helight3
                NH3:
                pop cx
                jmp NotHelight3
                Helight3:
                mov validateMoves[di],ch
                NotHelight3:
                cmp dl,1
        jnz HorizontalLeft
                EndValidate:
                popa
                popa
                RET
ValidateRook    ENDP 


ValidateBishop  Proc ;al = row cl = col si = player di = cell
                pusha
                mov ax, 0
                mov al, playerCells[si]
                mov di, ax 

                mov al, playerRows[si] 
                mov cl, playerCols[si]
                ; mov al,2
                ; mov cl,5
                ; mov di,21
                push cx
                push si
                mov cl,board[di]
                mov ch,0
                mov si,cx                
                Call GetPlayerColor  ; bx=color of the player to get its validation pos
                mov bx,cx  
                pop si
                pop cx
                push ax
                mov ax,si 
                mov ch,al
                pop ax
                pusha             
        TopLeft:
                cmp al,0
                jz TRt 
                cmp cl,0
                jz TRt 
                dec al 
                dec cl
                sub di,9
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop
                pop cx
                jmp HelightBishop
                NHBishop:
                pop cx
                jmp NotHelightBishop
                HelightBishop:
                mov validateMoves[di],ch
                NotHelightBishop:
                cmp dl,1
        jnz TopLeft
                TRt:
                popa
                pusha
                
        TopRight: 
                cmp al,0
                jz  DLt
                cmp cl,7 
                jz  DLt
                dec al
                inc cl
                sub di,7 
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop1
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop1
                pop cx
                jmp HelightBishop1
                NHBishop1:
                pop cx
                jmp NotHelightBishop1
                HelightBishop1:
                mov validateMoves[di],ch
                NotHelightBishop1:
                cmp dl,1
        jnz TopRight

                DLt:
                popa
                pusha

        DownLeft:  
                cmp cl,0
                jz DRt
                cmp al,7
                jz DRt
                inc al
                dec cl
                add di,7 
                mov dl,board[di]
                mov dh,0
                mov si,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop2
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop2
                pop cx
                jmp HelightBishop2
                NHBishop2:
                pop cx
                jmp NotHelightBishop2
                HelightBishop2:
                mov validateMoves[di],ch
                NotHelightBishop2:
                cmp dl,1
        jnz DownLeft

                DRt:
                popa
                
                pusha
                
        DownRight:  
                cmp cl,7
                jz  EndValidateBishop
                cmp al,7 
                jz  EndValidateBishop
                inc cl 
                inc al
                add di,9 
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop3
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop3
                pop cx
                jmp HelightBishop3
                NHBishop3:
                pop cx
                jmp NotHelightBishop3
                HelightBishop3:
                mov validateMoves[di],ch
                NotHelightBishop3:
                cmp dl,1
        jnz DownRight
        EndValidateBishop:
                popa
                popa
                RET
ValidateBishop  ENDP 



ValidateKnight Proc FAR                                         ;player 1==>black   ;al = row cl = col si = player di = cell
                              pusha
                             ;CALL GetPlayerColor ;cl = color
                                mov bx,si       ;bl = player number


                                mov al, playerCells[si]
                                mov ah, 0
                                mov di, ax
                                
                                mov al, playerRows[si]
                                mov dl, PlayerCols[si]
                                ;_______________________________;

                                cmp   dl,6
                                jae   mvKn1
                                cmp   al,7
                                je mvKn1
                                mov cl, board[di+10]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di+10],cl
                        mvKn1:  cmp   dl,1
                                jbe   mvKn2
                                cmp al, 7
                                je   mvKn2
                                mov cl, board[di+6]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di+6],cl
                        mvKn2:  cmp   dl, 7
                                je mvKn3
                                cmp al, 6
                                jae mvKn3
                                mov cl, board[di+17]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di+17],cl
                        mvKn3: cmp dl,0
                                je mvKn4
                                cmp al,6
                                jae mvKn4
                                mov cl, board[di+15]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di+15],cl
                        mvKn4:  cmp dl,6
                                jae mvKn5
                                cmp al,0
                                je mvKn5
                                mov cl, board[di-6]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di-6],cl
                        mvKn5:   cmp dl,1
                                jbe mvKn6
                                cmp al,0
                                je mvKn6
                                mov cl, board[di-10]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di-10],cl
                        mvKn6:   cmp dl,7
                                je mvKn7
                                cmp al,1
                                jbe mvKn7
                                mov cl, board[di-15]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di-15],cl
                        mvKn7:   cmp dl,0
                                je mvKn8
                                cmp al,1
                                jbe mvKn8
                                mov cl, board[di-17]
                                CALL GetPlayerColorV2
                                mov   validateMoves[di-17],cl
                                
                        mvKn8:          popa
                                        RET
ValidateKnight ENDP


ValidateQueen Proc  FAR                                                                 ;al = row cl = col si = player di = cell
                                CALL  ValidateBishop
                                CALL  ValidateRook
                                RET
ValidateQueen ENDP


;VALIDTE KING
;VALIDTE KING
Validatemovetheking PROC FAR ;INPUT DI , PLAYER:SI ,OUTPUT:CL
                PUSH SI
                PUSH AX
                CMP board[DI],emptyCell
                JE HERE;IF EMPTY CELL 
                ;IF NOT EMPTY

                AND SI,1
                SHL SI,3
                ;SI NOW HAVE COLOR OF PLAYER
                MOV AL,BOARD[DI]
                AND AL,8 ;CHECK
                MOV AH,0
                ; NOW AX HAVE COLOR OF PIECE
                CMP AX,SI 
                JE P;IF THEY HAVE SAME COLOR THEN IT ISN'T A VALID MOVE
                HERE:
                POP AX
                POP SI
                PUSH CX
                mov cx,si
                MOV validateMoves[DI],cl
                POP CX
                jmp aw
        p:
        POP AX 
                POP SI
        aw:
ret
Validatemovetheking ENDP 
 
;VALIDTE KING
;VALIDTE KING
ValidateKing    Proc FAR ;al = row cl = col si = player di = cell
        MOV AL,playerRows[SI]
        MOV CL,PlayerCols[SI]
        ;LEFT CELL
        PUSH DI
                CMP CL,1 
                JC GO ;IF COLUMN=0 it'll be negative then it's invalid
                ;IF CARRY NOT 1 THEN IT'S A VALID CELL
                SUB DI,1
                call Validatemovetheking
        ;RIGHT CELL                 
        GO:
        POP DI
        PUSH DI
        PUSH CX
                ADD CL,1
                PUSH BX
                MOV BL,8
                CMP BL,CL
                JE GO1 
                ;IF CL NOT EQUAL 8 THEN WE STILL IN RANGE OF 0 TO 7 COLUMNS --> IT'S A VALID CELL
                add di,1
                call Validatemovetheking        
        ;UP CELL
        GO1:
        POP BX
        POP CX
        POP DI
        PUSH DI
                CMP DI,8
                JC GO2
                ;IF CARRY NOT 1 THEN IT'S A VALID CELL
                sub di,8
                call Validatemovetheking
        ;DOWN CELL    
        GO2:
        POP DI
        PUSH DI
                ADD DI,8
                PUSH BX
                MOV BX,63 ;LAST CELL INDEX
                CMP BX,DI
                JC GO3
                ;IF CARRY NOT 1 THEN IT'S A VALID CELL
                call Validatemovetheking
        GO3:
        POP BX
        POP DI
        ;LEFT UP CELL
        PUSH DI
                CMP CL,1 
                JC GO4 ;IF COLUMN=0 it'll be negative then it's invalid 
                CMP AL,1
                JC GO4 ;IF ROW=0 it'll be negative then it's invalid
                ;IF CARRY NOT 1 THEN IT'S A VALID CELL
                sub di,9
                call Validatemovetheking
        GO4:
        POP DI
        PUSH DI
        ;RIGHT DOWN
        push cx
                ADD CL,1
                PUSH BX
                MOV BL,7
                CMP BL,CL;LAST COLUMN NO RIGHT
                JC GO5
                POP BX
                ADD DI,9
                PUSH BX
                MOV BX,63 ;LAST CELL INDEX
                CMP BX,DI
                JC GO5 ;LAST ROW NO DOWN
                ;IF CARRY NOT 1 THEN IT'S A VALID CELL
                call Validatemovetheking
        GO5:
        POP BX
        pop cx
        POP DI
        PUSH DI
        ;LEFT DOWN
                CMP CL,0 ;first column no left ;;;not working 
                JE GO6
                CMP AL,7
                JE GO6 
                ;NOT LAST ROW
                ADD DI,7
                ;IF CARRY NOT 1 THEN IT'S A VALID CELL
                call Validatemovetheking
                
        GO6: 
        POP DI
        ;RIGHT UP CELL
        PUSH DI
        push cx
                ADD CL,1
                PUSH BX
                MOV BL,7
                CMP BL,CL;LAST COLUMN NO RIGHT
                JC GO7
                CMP AL,1
                JC GO7 ;IF ROW=0 it'll be negative then it's invalid
                ;IF CARRY NOT 1 THEN IT'S A VALID CELL
                sub di,7 
                call Validatemovetheking
        GO7:               
        POP DI
        pop cx
        POP BX
                RET
ValidateKing    ENDP
;================== Player Moves ================;

MoveLeft        PROC FAR;si = player numbers
                cmp PlayerCols[si], 0;check validate move
                je EXITMOVELEFT      ;exit if not

                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player
                
                sub playerCols[si], 1;update   col
                sub playerCells[si],1;update   cell
                                     ;nochange row 

                shl si, 1;si*2                   ;to get from DataWord ? what bytes to add 2*si   
                sub PlayerPos[si], boardWidth;update player pos

                CALL MvePlayerToGraphics  ;(di = playerPos)
EXITMOVELEFT:   RET
MoveLeft        ENDP

MoveRight       PROC FAR;si = player numbers
                cmp playerCols[si], 7;check validate move
                je EXITMOVERIGHT     ;exit if not
                
                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player
                
                add playerCols[si], 1;update   col
                add playerCells[si],1;update   cell
                shl si, 1;si*2                      ;to get from DataWord ? what bytes to add 2*si 
                add PlayerPos[si], boardWidth   ;update player pos

                CALL MvePlayerToGraphics  ;(di = playerPos)
EXITMOVERIGHT:  RET
MoveRight       ENDP ;si = player numbers


MoveUp          PROC FAR;si = player numbers
                cmp playerRows[si], 0;check validate move
                je EXITMOVEUP        ;exit if not
                
                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player

                sub playerRows[si], 1;update player row
                sub playerCells[si],8;update player cell
                                     ;no change     col
                shl si, 1;si*2
                sub PlayerPos[si], 320*boardWidth

                CALL MvePlayerToGraphics ;(di = playerPos)
EXITMOVEUP:     RET
MoveUp          ENDP ;si = player numbers


MoveDown        PROC FAR;si = player numbers
                cmp playerRows[si], 7 ;check validate move
                je EXITMOVEDOWN       ;exit if not
                
                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player
                
                add playerRows[si], 1;update row
                add playerCells[si],8;update cell
                                     ;nochange col
                shl si, 1;si*2
                add PlayerPos[si], 320*boardWidth

                CALL MvePlayerToGraphics  ;(di = playerPos)
EXITMOVEDOWN:   RET
MoveDown        ENDP ;si = player numbers

;================== GAme Logic ================;

SelectValidationOfPeice PROC FAR;si = player number ;
                                ;====== inialize ===;
                                mov   ah, 0
                                mov   al, playerCells[si] ; ax = playerCell
                                mov   di, ax              ; di = playerCell
                                mov   dl, board[di]       ; dl = peiceType                         
                                and   dl, peice         

                                
                                ;======= validation ======;
                                cmp   dl, emptyCell     ;check peice if empty
                                jne   chkPeiceColorVLD  ;if not => check peice color
                                RET                     ;if empty => end function

        chkPeiceColorVLD:       mov   bl, board[di]     ;bl = peice color                   
                                mov   bh, 0             ;bl = peice color
                                and   bl, black         ;bl = peice color
                                push si                 ;store si = [player number]
                                AND SI,1                ;get if player1 or not
                                SHL SI,3                ;if player1 **let si = 8** corresponding to peice color 
                                CMP bx, si              ;compare peice color with si
                                pop si                  ;**restore si for not forgetten
                                je ValidSelectPeice     ;if color peice valid choose correct validaton
                                RET                     ;else end function
 
                                ;======= validation ======;
        ValidSelectPeice:       mov   playersState[si], playerMoveToChooseAction;update state
                                ;======== store data for later use in ** move peice =========;
                                mov   PlayerSelectedCell[si], al    

                                mov   al, playerRows[si]       
                                mov   PlayerSelectedRow[si], al  

                                shl   si, 1 
                                mov   ax, playerPos[si]           
                                mov   PlayerSelectedPos[si], ax           
                                shr si, 1 
                                ;======== store data for later use in ** move peice =========;

        chkPawn:                cmp   dl, pawn          ;chk peice
                                jne   chkRook           ;if not jump to next peice
                                CALL  ValidatePawn      ;else call proper function
                                jmp   exitSelectValidate;and jmp to the end of function
        chkRook:                cmp   dl, rook          ;chk peice
                                jne   chkKnight
                                CALL  ValidateRook
                                jmp   exitSelectValidate;and jmp to the end of function
        chkKnight:              cmp   dl, knight        ;chk peice
                                jne   chkBishop
                                CALL  ValidateKnight
                                jmp   exitSelectValidate;and jmp to the end of function
        chkBishop:              cmp   dl, bishop        ;chk peice
                                jne   chkQueen
                                CALL  ValidateBishop
                                jmp   exitSelectValidate;and jmp to the end of function
        chkQueen:               cmp   dl, queen         ;chk peice
                                jne   chkKing
                                CALL  ValidateQueen
                                jmp   exitSelectValidate;and jmp to the end of function

        chkKing:                CALL  ValidateKing      ;if no other then chk king
exitSelectValidate:
                                ;======== update graphics **highlight available moves =========;
                                CALL DrawHighlightedMvs
RET
SelectValidationOfPeice ENDP


ChKTime         PROC    FAR     ;board cell = bx
                push ax

                mov ah, 2ch ;cl = min, dh = sec
                int 21h  
                mov ax, peiceTimer[bx]


                pop ax
                RET
ChKTime         ENDP

SetTime         PROC    FAR     ;board cell = bx
                pusha

                mov ah, 2ch ;cl = min, dh = sec
                int 21h      
                mov ch, cl;ch = min
                mov cl,  dh
                mov peiceTimer[bx], cx

                popa
                RET
SetTime         ENDP

MovePeiceFromTo PROC    FAR ;si = playerNumber
                pusha
                mov bh, 0

                mov bl, PlayerSelectedCell[si];peice position
                mov bl, board[bx]             ;get peice
                shr bl, 4                     ;get clock state
                cmp bl, 0                     ;chk clock state = zero
                jne EXITMVEPEICE              ;if not zero => end function 
                
                mov bl, playerCells[si]     ;bx = player cell
                mov ax, si                  ;get valid state of cell
                cmp validateMoves[bx], al   ;chk if one of valid moves of player
                jne EXITMVEPEICE            ;if not => exit

                ;======= handel move cell **from  ======;
                ;== Graphically
                CALL MvePieceFromGraphics     ;out==>bl = cell
                ;== Logically
                mov bh, 0
                mov al, board[bx]             ;*********** al = peice that should move
                mov board[bx], emptyCell      ;set empty cell
                

                ;======= handel move cell **to  ======;
                ;== hande if pawn and about to promote
                mov dl, al      ;copy peice 
                and dl, 7       ;get peice  type only
                cmp dl, pawn    ;chk if pawn
                jne skpPwn      ;if not pawn skip
                cmp playerRows[si], 0        ;if first row 
                je  PrmPwn
                cmp playerRows[si], 7        ; or last row
                jne skpPwn
        PrmPwn: or al, 4        ;transfer peice to queen by set third bit
                ;== Graphically
        skpPwn: CALL MvePieceToGraphics      ;out ===> bx = cell
                ;== Logically
                mov dl, board[bx]               ;get peice type that killed
                and dl, peice
                cmp dl, king                    ;chk if king
                jne skipKingDead
                
                mov playersState[si], PlayerWin ;if king win
                xor si, 3           ; to toggle the player number to change states
                mov playersState[si], PlayerLose
                xor si, 3           ;to return the number of the player again
                 

        skipKingDead:        mov board[bx], al


                
                
                
EXITMVEPEICE:   CALL ClrHighlightedMvs
                mov playersState[si], playerMoveToChoosePeice
                popa
                RET
MovePeiceFromTo ENDP

PrntNumber      PROC ;bh = cell, dl = col
        pusha
        mov ah,0 
        mov al,bh    ;al = bh
        mov bh,10    ;num/10 
        div bh       ;ah= Rem => second digit 
                     ;al= Quo => first digit
        or ax, 3030h ;get ascii

        ;======= print min ========;
        pusha
                mov bh, 0;pg number
                mov dh, 24;row
                mov ah, 2
                int 10h
        popa
        inc dl
        pusha
                mov ah, 09h
                mov bh, 0
                mov bl, 0fh
                mov cx, 1
                int 10h

        popa

        ;======= print sec ========;
        pusha
                mov bh, 0;pg number
                mov dh, 24;row
                mov ah, 2
                int 10h
        popa
        pusha
                mov al, ah
                mov ah, 09h
                mov bh, 0
                mov bl, 0fh
                mov cx, 1
                int 10h

        popa

        

POPA
RET
PrntNumber      ENDP

GetCurrTime     PROC    FAR ;
                pusha
                mov ah, 2ch ;cl = min, dh = sec
                int 21h      
                
                sub dh, startSec;dh - start_sec
                jnc SubMn1      ;chk if carry
                add dh, 60      ;if it take 60sec from mins
                sub cl, 1       ;and add dec one min 

        SubMn1: sub cl, StartMin;subtract min
        
                cmp cl, GameMin;chk it time not ended
                jl  ContG      ;if not ended continue
                mov playersState[player1], PlayerLose
                mov playersState[player2], PlayerLose
                popa
                RET
        ContG:  mov ah, GameMin
                mov al, GameSec

                sub al, dh 
                jnc SubMn2
                add al, 60
                sub ah, 1  ;al = sec
        SubMn2:
                sub ah, cl ;ah = min


                mov bh, ah
                mov dl, 0
                CALL PrntNumber

                 ;======= print column ========;
                pusha
                        mov bh, 0;pg number
                        mov dh, 24;row
                        mov dl, 2
                        mov ah, 2
                        int 10h
                popa
                pusha
                        mov al, ':'
                        mov ah, 09h
                        mov bh, 0
                        mov bl, 0fh
                        mov cx, 1
                        int 10h

                popa

                mov bh, al
                mov dl, 3
                CALL PrntNumber

                ;====== print ========
                popa
                REt
GetCurrTime     ENDP            




StartGame PROC FAR
        ; ____ inialize video mode ____;
        mov      ax, 0a000h                        ;for inline drawing
        mov      es, ax

        mov ax, 0003h                                  ; clear screen
        int 10H

        mov      ax, 0013h                         ; to video mode
        int      10h
        ; ____ inialize video mode ____;

        ;___ position player1 al =row    cl=col   =>di=StartPos ___;
                
        
        CALL DrawBoard
        

        ;==== t
        mov ah, 2ch
        int 21h
        mov StartMin, cl
        mov StartSec, dh

        ;== test     
        

        

MAIN_LOOP:
        ;================= TODO ================;
        mov al, playersState[0]
        cmp playersState[0], PlayerLose
        cmp playersState[0], PlayerWin
        ;contain validation of end game
        ;================= TODO ================;

        CALL GetCurrTime

        mov ah, 1
        int 16h
        jz MAIN_LOOP

        mov ah, 0
        int 16h

        ;or al, 00100000b ;capital letter
        mov si, 1
        cmp al, 'w'
        jne pressA
        Call MoveUp
        jmp MAIN_LOOP
        
        pressA: cmp al, 'a'
                jne pressS
                CALL MoveLeft
                shrt: jmp MAIN_LOOP

        pressS: cmp al, 's'
                jne pressD
                CALL MoveDown
                jmp MAIN_LOOP

        pressD: cmp al, 'd'         ;right
                jne pressQ
                CALL MoveRight
                jmp MAIN_LOOP

        pressQ:         cmp al, 'q'
                        jne pressUp
                        cmp playersState[1], playerMoveToChoosePeice
                        jne stateLabel1
                        CALL SelectValidationOfPeice
                        jmp MAIN_LOOP
        stateLabel1:    cmp playersState[1], playerMoveToChooseAction
                        jne MAIN_LOOP
                        CALL MovePeiceFromTo
                        jmp MAIN_LOOP
                        ;_________ highlight moves _____;


        pressUp:        mov si, 2       ;check another player
                        cmp ah, 48h
                        jne pressLeft
                        CALL MoveUp
                        jmp MAIN_LOOP

        pressLeft:      cmp ah, 4bh
                        jne pressDown
                        Call MoveLeft
                        jmp MAIN_LOOP

        pressDown:      cmp ah, 50h  
                        jne pressRight
                        CALL MoveDown
                        jmp MAIN_LOOP

        pressRight:     cmp ah, 4dh
                        jne pressZero
                        CALL MoveRight
        shrt2:          jmp shrt
                        
        pressZero:              cmp   al, '0'
                                jne   MainEndGame
                                cmp   playersState[2], playerMoveToChoosePeice
                                jne   stateLabel2
                                CALL  SelectValidationOfPeice
                                jmp   shrt2
        stateLabel2:            cmp   playersState[2], playerMoveToChooseAction
                                jne   MainEndGame
                                CALL  MovePeiceFromTo
        MainEndGame:            cmp ah,3Eh      ;chk if clik f4
                                jne shrt2
                                mov playersState[1], PlayerEndedGame

        jmp shrt2
StartGame ENDP
;_______ inialize board ___________;   


RowColToStartPos PROC ;al =row    cl=col   =>di=StartPos

        push ax
        push bx
        push cx
        push dx

        mov dl,al               ;dl = row
        mov al,boardWidth       ;al = width|hight
        mul cl                  ;al = width*col
        mov bx,ax               ;bx = width*col

        mov ax,320*boardWidth   ;ax=320*hight
        mul dx                  ;ax=320*hight*row

        mov di,ax               ;di=320*row*hight
        add  di,bx              ;di=320*row*hight+width*col

        pop dx       
        pop cx       
        pop bx       
        pop ax       
        RET
RowColToStartPos ENDP 

;; [move => cell] XOR validateMoves[cell], player

END 
 

