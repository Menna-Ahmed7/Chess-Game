;Author: Aliaa Gheis
;DATE:
;This Progam
;======================
;======================

                ;       0    1    2    3    4    5    6    7        rows
                ;  0    0    1    2    3    4    5    6    7
                ;  1    8    ............................ 15
                ;  2    16   ...............................
                ;  3    24 ..................................
                ;  4    32 ..................................   
                ;  5    40 ..................................
                ;  6    48 ..................................
                ;  7    56..............................  63

        PUBLIC boardWidth, imageWidth, color, board, Bpawn, validateMoves, highlightPeiceMvs
        PUBLIC playerCells, playerCols, playerRows, PlayerPos, highlightColor, PlayerSelectedCell,PlayerSelectedRow, PlayerSelectedPos
        EXTRN DrawGrid:FAR
        EXTRN DrawBoard:FAR
        EXTRN DrawSquareBord:FAR
        EXTRN MvePlayerFromGraphics:FAR
        EXTRN MvePlayerToGraphics:FAR
        EXTRN DrawHighlightedMvs:FAR
        EXTRN ClrHighlightedMvs:FAR
        EXTRN MvePieceFromGraphics:FAR
        EXTRN MvePieceToGraphics:FAR

       ; EXTRN Available_BackGround:FAR
       ; EXTRN DrawHighlightedMvs:FAR
        .286
        .MODEL HUGE
        .STACK 256
.DATA
        color          db  31, 9
        highlightColor equ 72
        highlightPeiceMvs db ?, 64, 80
        boardWidth     equ 23
        imageWidth     equ 23
        ; ____ game peice ____ ;
        emptyCell      equ 0
        pawn           equ 1
        rook           equ 2
        knight         equ 3
        bishop         equ 4
        queen          equ 5
        king           equ 6
        ; ____ peice color ____ ;
        black          equ 8
        white          equ 0
        ; ____ peice mask ____ ;
        peice          equ 7
        ;______pawn directions_____;
        pawnDir         db ?, +8, -8
        ;____ players _____;
        player1         equ 1
        player2         equ 2
        playerMoveToChoosePeice equ 0
        playerMoveToChooseAction equ 1

        playersState db ?, playerMoveToChoosePeice, playerMoveToChoosePeice

        playerCells db ?, 0, 56
        playerRows  db ?, 0, 7
        playerCols  db ?, 0, 0
        PlayerPos   dw ?, 0, 51520
        PlayerSelectedCell  db ?, ?, ?
        PlayerSelectedRow  db ?, ?, ?
        PlayerSelectedPos  dw ?, ?, ?

        validateMoves db 64 dup(0)
        ; ____ board ____ ;
        board          db  rook+black, knight+black, bishop+black, queen+black, king+black, bishop+black, knight+black, rook+black
                       db  8 dup(pawn+black)
                       db  4 dup(8 dup(emptyCell))
                       db  8 dup(pawn)
                       db  rook, knight, bishop, queen, king, bishop, knight, rook

Bpawn DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wpawn DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Brook DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wrook DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 15, 15, 16, 16, 15, 15, 15, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bknight DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 4, 4, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wknight DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 4, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 15, 15, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4
 DB 4, 16, 16, 16, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bbishop DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wbishop DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 16, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 16, 16, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bqueen DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wqueen DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 16, 16, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 4, 4
 DB 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4
 DB 16, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 16, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 16, 15, 16, 16, 15, 16, 16, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 16, 16, 15, 16, 16, 15, 15, 16, 15, 15, 16, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 16, 16, 15, 16, 16, 16, 16, 16, 15, 16, 16, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Bking DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 16, 4, 4, 4, 4
 DB 4, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 16, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 16, 15, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 15, 16, 4, 4, 4
 DB 4, 4, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 15, 15, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 15, 15, 15, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4



Wking DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 15, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 16, 16, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 15, 15, 16, 16, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 16, 16, 15, 15, 16, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 4, 4
 DB 4, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 4, 4, 4
 DB 4, 4, 16, 16, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4
 DB 4, 4, 4, 16, 16, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 15, 16, 16, 16, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 15, 15, 16, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 15, 15, 16, 16, 16, 16, 16, 15, 15, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 16, 16, 16, 16, 16, 15, 15, 15, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4        

.code

waitSec PROC   FAR                                                ;ax = row, cx = col =>>>> ax = current start point
                    push     ax

                    mov      ah, 07
                    int      21h

                    pop      ax
                    RET
waitSec ENDP     




GetPlayerColor Proc far  ; si = player   ; cl =color
                push si
                shr si,3            
                and si,1   
                mov ch,0
                mov cx,si
                pop si
ret
GetPlayerColor Endp

ispeice Proc  ; si = palyer ; dl = 1 if piece and 0 if not piece
                push si
                and si ,peice
                shl si,5
                jnz PeiceExist
                mov dl,0 
                jmp Ex
                PeiceExist:
                mov dl,1
                Ex:
                pop si
ret
ispeice Endp


RowColToCell    PROC FAR ;al = row  cl = col  =>> si = CellNumber
                push ax
                push bx
                mov bl,8
                mul bl  ; al = al*8
                add al, cl ; al = al*8 + col

                sub ah, ah
                mov si, ax

                pop bx
                pop ax
                RET
RowColToCell ENDP 


;________ __________ ___________;
;________ __________ ___________;
;________ validators ___________;
;________ __________ ___________;
;________ __________ ___________;

ValidatePawn    Proc ;al = row cl = col si = player di = cell
                cmp si, player1
                jne cmpPlayer2
                mov validateMoves[di+8], 1
                RET
        cmpPlayer2:  
                mov validateMoves[di-8], 2   
                RET
ValidatePawn    ENDP 


ValidateRook    Proc ;al = row cl = col si = player di = cell
                pusha
                mov ax, 0
                mov al, playerCells[si]
                mov di, ax 

                mov al, playerRows[si] 
                mov cl, playerCols[si]
                
                push cx
                push si
                mov cl,board[di]
                mov ch,0
                mov si,cx
                Call GetPlayerColor  ; bx=color of the player to get its validation pos
                mov bx,cx  
                pop si
                pop cx
                push ax
                mov ax,si 
                mov ch,al
                pop ax
                pusha             
        verticalDown:
                cmp al,7
                jz VP
                inc al
                add di,8
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH
                pop cx
                jmp Helight
                NH:
                pop cx
                jmp NotHelight
                Helight:
                mov validateMoves[di],ch
                NotHelight:
                cmp dl,1
        jnz verticalDown
                VP:
                popa
                pusha
                
        verticalUP: 
                cmp al,0
                jz  HR
                dec al
                sub di,8 
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight1
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH1
                pop cx
                jmp Helight1
                NH1:
                pop cx
                jmp NotHelight1
                Helight1:
                mov validateMoves[di],ch
                NotHelight1:
                cmp dl,1
        jnz verticalUP

                HR:
                popa
                pusha

        HorizontalRight:  
                cmp cl,7
                jz HL
                inc cl
                add di,1 
                mov dl,board[di]
                mov dh,0
                mov si,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight2
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH2
                pop cx
                jmp Helight2
                NH2:
                pop cx
                jmp NotHelight2
                Helight2:
                mov validateMoves[di],ch
                NotHelight2:
                cmp dl,1
        jnz HorizontalRight

                HL:
                popa
                
                pusha
                
        HorizontalLeft:  
                cmp cl,0
                jz  EndValidate
                dec cl
                sub di,1
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz Helight3
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NH3
                pop cx
                jmp Helight3
                NH3:
                pop cx
                jmp NotHelight3
                Helight3:
                mov validateMoves[di],ch
                NotHelight3:
                cmp dl,1
        jnz HorizontalLeft
                EndValidate:
                popa
                popa
                RET
ValidateRook    ENDP 


ValidateBishop  Proc ;al = row cl = col si = player di = cell
                pusha
                ; mov al,2
                ; mov cl,5
                ; mov di,21
                push cx
                push si
                mov cl,board[di]
                mov ch,0
                mov si,cx                
                Call GetPlayerColor  ; bx=color of the player to get its validation pos
                mov bx,cx  
                pop si
                pop cx
                push ax
                mov ax,si 
                mov ch,al
                pop ax
                pusha             
        TopLeft:
                cmp al,0
                jz TRt 
                cmp cl,0
                jz TRt 
                dec al 
                dec cl
                sub di,9
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop
                pop cx
                jmp HelightBishop
                NHBishop:
                pop cx
                jmp NotHelightBishop
                HelightBishop:
                mov validateMoves[di],ch
                NotHelightBishop:
                cmp dl,1
        jnz TopLeft
                TRt:
                popa
                pusha
                
        TopRight: 
                cmp al,0
                jz  DLt
                cmp cl,7 
                jz  DLt
                dec al
                inc cl
                sub di,7 
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop1
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop1
                pop cx
                jmp HelightBishop1
                NHBishop1:
                pop cx
                jmp NotHelightBishop1
                HelightBishop1:
                mov validateMoves[di],ch
                NotHelightBishop1:
                cmp dl,1
        jnz TopRight

                DLt:
                popa
                pusha

        DownLeft:  
                cmp cl,0
                jz DRt
                cmp al,7
                jz DRt
                inc al
                dec cl
                add di,7 
                mov dl,board[di]
                mov dh,0
                mov si,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop2
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop2
                pop cx
                jmp HelightBishop2
                NHBishop2:
                pop cx
                jmp NotHelightBishop2
                HelightBishop2:
                mov validateMoves[di],ch
                NotHelightBishop2:
                cmp dl,1
        jnz DownLeft

                DRt:
                popa
                
                pusha
                
        DownRight:  
                cmp cl,7
                jz  EndValidateBishop
                cmp al,7 
                jz  EndValidateBishop
                inc cl 
                inc al
                add di,9 
                mov dl,board[di]
                mov dh,0
                mov si ,dx
                Call ispeice          ;dl=1 if peice and dl =0 if not peice     
                cmp dl,0
                jz HelightBishop3
                push cx
                Call GetPlayerColor   ; cx=color of the player in this cell
                cmp cx,bx
                jz  NHBishop3
                pop cx
                jmp HelightBishop3
                NHBishop3:
                pop cx
                jmp NotHelightBishop3
                HelightBishop3:
                mov validateMoves[di],ch
                NotHelightBishop3:
                cmp dl,1
        jnz DownRight
        EndValidateBishop:
                popa
                popa
                RET
ValidateBishop  ENDP 


ValidateKnight  Proc ;al = row cl = col si = player di = cell
                mov validateMoves[17], 1

                RET
ValidateKnight  ENDP 


ValidateQueen   Proc ;al = row cl = col si = player di = cell
                CALL ValidateBishop
                CALL ValidateRook
                RET
ValidateQueen   ENDP 


ValidateKing    Proc ;al = row cl = col si = player di = cell
                mov validateMoves[16], 1
                RET
ValidateKing    ENDP
ClearSelectedPieceonmove Proc
ClearSelectedPieceonmove Endp 
;_____________________________;
;____________MOVEs_________________;
;_____________________________;

MoveLeft        PROC FAR;si = player numbers
                cmp PlayerCols[si], 0;check validate move
                je EXITMOVELEFT      ;exit if not

                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player
                
                sub playerCols[si], 1;update   col
                sub playerCells[si],1;update   cell
                                     ;nochange row 

                shl si, 1;si*2                   ;to get from DataWord ? what bytes to add 2*si   
                sub PlayerPos[si], boardWidth;update player pos

                CALL MvePlayerToGraphics  ;(di = playerPos)
EXITMOVELEFT:   RET
MoveLeft        ENDP

MoveRight       PROC FAR;si = player numbers
                cmp playerCols[si], 7;check validate move
                je EXITMOVERIGHT     ;exit if not
                
                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player
                
                add playerCols[si], 1;update   col
                add playerCells[si],1;update   cell
                shl si, 1;si*2                      ;to get from DataWord ? what bytes to add 2*si 
                add PlayerPos[si], boardWidth   ;update player pos

                CALL MvePlayerToGraphics  ;(di = playerPos)
EXITMOVERIGHT:  RET
MoveRight       ENDP ;si = player numbers


MoveUp          PROC FAR;si = player numbers
                cmp playerRows[si], 0;check validate move
                je EXITMOVEUP        ;exit if not
                
                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player

                sub playerRows[si], 1;update player row
                sub playerCells[si],8;update player cell
                                     ;no change     col
                shl si, 1;si*2
                sub PlayerPos[si], 320*boardWidth

                CALL MvePlayerToGraphics ;(di = playerPos)
EXITMOVEUP:     RET
MoveUp          ENDP ;si = player numbers


MoveDown        PROC FAR;si = player numbers
                cmp playerRows[si], 7 ;check validate move
                je EXITMOVEDOWN       ;exit if not
                
                CALL MvePlayerFromGraphics ;clear highlight of position (si) => di=position of player
                
                add playerRows[si], 1;update row
                add playerCells[si],8;update cell
                                     ;nochange col
                shl si, 1;si*2
                add PlayerPos[si], 320*boardWidth

                CALL MvePlayerToGraphics  ;(di = playerPos)
EXITMOVEDOWN:   RET
MoveDown        ENDP ;si = player numbers


SelectValidationOfPeice PROC FAR;si = player number ;
                                ;====== inialize ===;
                                mov   ah, 0
                                mov   al, playerCells[si] ; ax = playerCell
                                mov   di, ax              ; di = playerCell
                                mov   dl, board[di]       ; dl = peiceType                         
                                and   dl, peice         

                                
                                ;======= validation ======;
                                cmp   dl, emptyCell     ;check peice if empty
                                jne   chkPeiceColorVLD  ;if not => check peice color
                                RET                     ;if empty => end function

        chkPeiceColorVLD:       mov   bl, board[di]     ;bl = peice color                   
                                mov   bh, 0             ;bl = peice color
                                and   bl, black         ;bl = peice color
                                push si                 ;store si = [player number]
                                AND SI,1                ;get if player1 or not
                                SHL SI,3                ;if player1 **let si = 8** corresponding to peice color 
                                CMP bx, si              ;compare peice color with si
                                pop si                  ;**restore si for not forgetten
                                je ValidSelectPeice     ;if color peice valid choose correct validaton
                                RET                     ;else end function
 
                                ;======= validation ======;
        ValidSelectPeice:       mov   playersState[si], playerMoveToChooseAction;update state
                                ;======== store data for later use in ** move peice =========;
                                mov   PlayerSelectedCell[si], al    

                                mov   al, playerRows[si]       
                                mov   PlayerSelectedRow[si], al  

                                shl   si, 1 
                                mov   ax, playerPos[si]           
                                mov   PlayerSelectedPos[si], ax           
                                shr si, 1 
                                ;======== store data for later use in ** move peice =========;

        chkPawn:                cmp   dl, pawn          ;chk peice
                                jne   chkRook           ;if not jump to next peice
                                CALL  ValidatePawn      ;else call proper function
                                jmp   exitSelectValidate;and jmp to the end of function
        chkRook:                cmp   dl, rook          ;chk peice
                                jne   chkKnight
                                CALL  ValidateRook
                                jmp   exitSelectValidate;and jmp to the end of function
        chkKnight:              cmp   dl, knight        ;chk peice
                                jne   chkBishop
                                CALL  ValidateKnight
                                jmp   exitSelectValidate;and jmp to the end of function
        chkBishop:              cmp   dl, bishop        ;chk peice
                                jne   chkQueen
                                CALL  ValidateBishop
                                jmp   exitSelectValidate;and jmp to the end of function
        chkQueen:               cmp   dl, queen         ;chk peice
                                jne   chkKing
                                CALL  ValidateQueen
                                jmp   exitSelectValidate;and jmp to the end of function

        chkKing:                CALL  ValidateKing      ;if no other then chk king
exitSelectValidate:
                                ;======== update graphics **highlight available moves =========;
                                CALL DrawHighlightedMvs
RET
SelectValidationOfPeice ENDP


MovePeiceFromTo PROC    FAR ;si = playerNumber
                pusha
                mov bl, playerCells[si]     ;bx = go to PeiceCell
                mov ah, 0                   ;    
                mov al, validateMoves[bx]   ;get valid state of cell
                cmp ax, si                  ;chk if one of valid moves of player
                jne EXITMVEPEICE            ;if not => exit

                CALL MvePieceFromGraphics ;handel graphics
                CALL MvePieceToGraphics ;else clear
                ;;mov bx, 0
                ;;mov bl, playerCells[si] 
                ;;mov di, bx                 ;di = to cell
                ;mov bl, PlayerSelectedPeiceCell[si]     ;bx = from cell
                ;TODO validate;
                ;mov ax, si                                      ;check if validate move
                ;and al, validateMoves[di]      
                ;jnz EXITMVEPEICE

               ; mov al, board[bx]               ;get peice to move
               ; mov board[bx], emptyCell        ;empty fromCell
               ; mov board[di], al               ;add peice toCell
                mov playersState[si], playerMoveToChoosePeice
                
                CALL ClrHighlightedMvs
EXITMVEPEICE:   popa
                RET
MovePeiceFromTo ENDP





MAIN PROC FAR
        MOV      AX, @DATA
        MOV      DS, AX

        mov      ax, 0a000h                        ;for inline drawing
        mov      es, ax

        mov ax, 0003h                                  ; clear screen
        int 10H

        mov      ax, 0013h                         ; to video mode
        int      10h
        ; ____ inialize video mode ____;

        ;___ position player1 al =row    cl=col   =>di=StartPos ___;
        
        CALL DrawGrid 
        CALL DrawBoard
        mov al, 4
        mov di, PlayerPos[2]
        CALL DrawSquareBord
        mov di, PlayerPos[4]
        CALL DrawSquareBord

MAIN_LOOP:

        mov ah, 01
        int 16h
        jnz MAIN_LOOP

        mov ah, 0
        int 16h

        ;or al, 00100000b ;capital letter
        mov si, 1
        cmp al, 'w'
        jne pressA
        Call MoveUp
        jmp MAIN_LOOP
        
        pressA: cmp al, 'a'
                jne pressS
                CALL MoveLeft
                shrt: jmp MAIN_LOOP

        pressS: cmp al, 's'
                jne pressD
                CALL MoveDown
                jmp MAIN_LOOP

        pressD: cmp al, 'd'         ;right
                jne pressQ
                CALL MoveRight
                jmp MAIN_LOOP

        pressQ:         cmp al, 'q'
                        jne pressUp
                        cmp playersState[1], playerMoveToChoosePeice
                        jne stateLabel1
                        CALL SelectValidationOfPeice
                        jmp MAIN_LOOP
        stateLabel1:    cmp playersState[1], playerMoveToChooseAction
                        jne MAIN_LOOP
                        CALL MovePeiceFromTo
                        jmp MAIN_LOOP
                        ;_________ highlight moves _____;


        pressUp:        mov si, 2       ;check another player
                        cmp ah, 48h
                        jne pressLeft
                        CALL MoveUp
                        jmp MAIN_LOOP

        pressLeft:      cmp ah, 4bh
                        jne pressDown
                        Call MoveLeft
                        jmp MAIN_LOOP

        pressDown:      cmp ah, 50h  
                        jne pressRight
                        CALL MoveDown
                        jmp MAIN_LOOP

        pressRight:     cmp ah, 4dh
                        jne pressZero
                        CALL MoveRight
                        jmp shrt
                        
        pressZero:      cmp al, '0'
                        jne shrt
                        cmp playersState[2], playerMoveToChoosePeice
                        jne shrt
                        CALL SelectValidationOfPeice
                        
jmp shrt
     
        ;__end___;
        CALL     waitSec
        CALL     waitSec
        MOV      AH, 4CH
        INT      21H
MAIN ENDP
;_______ inialize board ___________;   




;________ __________ ___________;
;________ __________ ___________;
;________ utilis ___________;
;________ __________ ___________;
;________ __________ ___________;









RowColToStartPos PROC ;al =row    cl=col   =>di=StartPos

        push ax
        push bx
        push cx
        push dx

        mov dl,al               ;dl = row
        mov al,boardWidth       ;al = width|hight
        mul cl                  ;al = width*col
        mov bx,ax               ;bx = width*col

        mov ax,320*boardWidth   ;ax=320*hight
        mul dx                  ;ax=320*hight*row

        mov di,ax               ;di=320*row*hight
        add  di,bx              ;di=320*row*hight+width*col

        pop dx       
        pop cx       
        pop bx       
        pop ax       
        RET
RowColToStartPos ENDP 

;; [move => cell] XOR validateMoves[cell], player

END MAIN
 

